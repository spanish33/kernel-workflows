name: sultan-susfs-clang

permissions:
  contents: write  
  actions: write   

on:
  workflow_dispatch:

jobs:
  clang:
    runs-on: ubuntu-latest
    
    env:
      CODENAME: zuma
      REPO: android_kernel_google_zuma

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'


      - name: Install dependencies
        run: |
         sudo apt update
         sudo apt install -y libssl-dev libelf-dev bc flex bison libncurses-dev

      - name: Restore Clang Toolchain Cache
        id: cache-clang
        uses: actions/cache/restore@v4
        with:
          path: ./toolchain/clang-r498229b
          key: clang-r498229b

      - name: Clone Clang Toolchain
        if: steps.cache-clang.outputs.cache-hit != 'true'
        run: |
          git clone --depth=1 --branch=android15-release https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 clang-prebuilts
          mkdir -p ./toolchain
          mv clang-prebuilts/clang-r498229b ./toolchain/clang-r498229b
          rm -rf clang-prebuilts

      - name: Save Clang Toolchain Cache
        if: steps.cache-clang.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ./toolchain/clang-r498229b
          key: clang-r498229b

      
      - name: Set up environment variables
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "LD=ld.lld" >> $GITHUB_ENV
          echo "AR=llvm-ar" >> $GITHUB_ENV
          echo "NM=llvm-nm" >> $GITHUB_ENV
          echo "OBJCOPY=llvm-objcopy" >> $GITHUB_ENV
          echo "OBJDUMP=llvm-objdump" >> $GITHUB_ENV
          echo "STRIP=llvm-strip" >> $GITHUB_ENV
          echo "LLVM=1" >> $GITHUB_ENV
          echo "LLVM_IAS=1" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/toolchain/clang-r498229b/bin:$PATH" >> $GITHUB_ENV
          echo "CROSS_COMPILE=aarch64-linux-gnu-" >> $GITHUB_ENV
          echo "CONFIG=${{env.REPO}}" >> $GITHUB_ENV
          

      - name: Check compiler version
        run: clang --version 
        
        
      - name: Clone Repositories
        run: |
          echo "Clone Repositories"
          
          # Clone Repositories
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1
          git clone https://github.com/spanish33/AnyKernel3.git -b 15.0.0-sultan-zuma
          git clone https://github.com/spanish33/patches.git
          git clone --depth=1 https://github.com/kerneltoast/${{env.REPO}} -b 15.0.0-sultan
      
      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory"
          cd "${{ env.CONFIG }}"
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -

      - name: Apply SUSFS Patches
        run: |     
          # Copy SUSFS patches
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch ${{env.REPO}}/
          cp ./susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ${{env.REPO}}/KernelSU/
          cp ./susfs4ksu/kernel_patches/fs/* ${{env.REPO}}/fs/
          cp ./susfs4ksu/kernel_patches/include/linux/* ${{env.REPO}}/include/linux/
          cp ./patches/uname.patch ${{env.REPO}}/
          cp ./patches/fuze.patch ${{env.REPO}}/
          cp ./patches/safemode.patch ${{env.REPO}}/
          cp ./patches/0ctobot_hooks.patch ${{env.REPO}}/
          cp ./patches/ksu_handle_execve_ksud.patch ${{env.REPO}}/KernelSU/
          cp ./patches/devpts_lsm.patch ${{env.REPO}}/KernelSU/
          cp ./patches/ksu_version.patch ${{env.REPO}}/KernelSU/
          cp ./patches/hook_mode.patch ${{env.REPO}}/KernelSU/
          cp ./patches/su_compat_toggle.patch ${{env.REPO}}/KernelSU/
          cp ./patches/managers.patch ${{env.REPO}}/KernelSU/
          

          echo "Changing to configuration directory"
          cd "${{ env.CONFIG }}"
          echo "Applying SUSFS patches..."
          patch -p1 --forward < 50_add_susfs_in_gki-android14-6.1.patch || true
          patch -p0 --forward < uname.patch || true
          patch -p0 --forward < fuze.patch || true
          patch -p1 --forward < safemode.patch || true
          
          echo "Changing to KernelSU Directory to Apply KernelSU Patches"
          cd KernelSU
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true
          patch -p1 --forward < ksu_handle_execve_ksud.patch || true
          patch -p1 --forward < devpts_lsm.patch || true
          patch -p0 --forward < ksu_version.patch || true
          patch -p1 --forward < hook_mode.patch || true
          patch -p0 --forward < su_compat_toggle.patch || true
          patch -p0 --forward < managers.patch || true



      - name: Apply KSU Hooks from 0ctobot
        run: |
          echo "Applying hooks"
          cd "${{ env.CONFIG }}"
          patch -p1 --forward < 0ctobot_hooks.patch || true

      - name: Apply SUSFS
        run: |
          cd "${{ env.CONFIG }}"
          DEFCONFIG=arch/arm64/configs/${{ env.CODENAME }}_defconfig
          # Remove existing conflicting LTO lines
          sed -i '/^CONFIG_LTO/d' $DEFCONFIG
          sed -i '/^CONFIG_LTO_GCC/d' $DEFCONFIG
          sed -i '/^CONFIG_LTO_CLANG/d' $DEFCONFIG
          sed -i '/^CONFIG_LTO_CLANG_THIN/d' $DEFCONFIG
          sed -i '/^CONFIG_LTO_CLANG_FULL/d' $DEFCONFIG
          sed -i '/^CONFIG_LTO_NONE/d' $DEFCONFIG

          # Add the CLANG LTO and SUSFS config
          echo "# CONFIG_LTO is not set" >> $DEFCONFIG
          echo "# CONFIG_LTO_CLANG is not set" >> $DEFCONFIG
          echo "# CONFIG_LTO_CLANG_THIN is not set" >> $DEFCONFIG
          echo "# CONFIG_LTO_GCC is not set" >> $DEFCONFIG
          echo "# CONFIG_LTO_CLANG_FULL is not set" >> $DEFCONFIG
          echo "CONFIG_KSU=y" >> $DEFCONFIG
          echo "CONFIG_KSU_WITH_KPROBES=n" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> $DEFCONFIG
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> $DEFCONFIG
          echo "CONFIG_TMPFS_XATTR=y" >> $DEFCONFIG
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> $DEFCONFIG

            
      - name: Change Kernel Name
        run: |
          cd "${{ env.CONFIG }}"
          echo "Changing Kernel Name..."
          sed -i 's/CONFIG_LOCALVERSION="-Sultan"/CONFIG_LOCALVERSION="-android14-11-gd7dac4b14270-ab12946699"/' \
            ./arch/arm64/configs/${{ env.CODENAME }}_defconfig

      - name: Build defconfig
        run: |
          cd "${{ env.CONFIG }}"
          # Use the correct defconfig for your device
          make O=out ARCH=arm64 ${{ env.CODENAME }}_defconfig

      - name: Check final .config for SUSFS and LTO
        run: |
          cd "${{ env.CONFIG }}"
          echo "== Final .config  =="
          grep -E 'CONFIG_LTO|CONFIG_KSU|CONFIG_SUSFS' out/.config || echo "❌ Missing expected configs"


      - name: Build the Kernel
        run: |
         cd "${{ env.CONFIG }}"
         export KCFLAGS="-Wno-missing-variable-declarations -Wno-unused-but-set-variable -Wno-error -Wno-unused-variable -Wno-unused-const-variable"
         make O=out ARCH=arm64 LLVM=1 LLVM_IAS=1 \
         CROSS_COMPILE=aarch64-linux-gnu- \
         CC=clang -j$(nproc)
         
      - name: Check .config for SUSFS and LTO
        run: |
          cd "${{ env.CONFIG }}"
          echo "== Final .config  =="
          grep -E 'CONFIG_LTO|CONFIG_KSU|CONFIG_SUSFS' out/.config || echo "❌ Missing expected configs"
      
      - name: Copy Images
        run: |
          cd "${{ env.CONFIG }}"
          cp out/arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          cat out/google-devices/zuma/dts/*.dtb > ../AnyKernel3/dtb

      - name: Create Flashable ZIP
        run: |
          cd AnyKernel3
          ZIP_NAME="Sultan_SUSFS_KernelSU_A15_Clang_LTO.zip"
          zip -r "../$ZIP_NAME" ./*

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Zuma-A15-Clang-LTO
          path: |
            ./Sultan_SUSFS_KernelSU_A15_Clang_LTO.zip
